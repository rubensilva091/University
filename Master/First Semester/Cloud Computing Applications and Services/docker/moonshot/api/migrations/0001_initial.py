# Generated by Django 5.0.7 on 2024-08-21 15:04

import api.managers
import api.validators
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Laboratory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128)),
                ('nif', models.CharField(max_length=32)),
                ('ers_number', models.CharField(max_length=32)),
                ('telephone', models.CharField(max_length=16)),
            ],
            options={
                'verbose_name_plural': 'Laboratories',
                'permissions': [('can_create_recovery', 'Can create DGC for Recoveries'), ('can_create_test', 'Can create DGC for Tests'), ('can_create_vaccination', 'Can create DGC for Vaccinations')],
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('date_of_birth', models.DateField()),
                ('identifier', models.CharField(max_length=32, null=True)),
                ('sex', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other'), ('unknown', 'Unknown')], max_length=16, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RecordEntry',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_id', models.UUIDField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', api.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Manager',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('laboratories', models.ManyToManyField(to='api.laboratory')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nic', models.CharField(max_length=32, unique=True)),
                ('laboratories', models.ManyToManyField(blank=True, to='api.laboratory')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': [('can_create_recovery', 'Can create DGC for Recoveries'), ('can_create_test', 'Can create DGC for Tests'), ('can_create_vaccination', 'Can create DGC for Vaccinations')],
            },
        ),
        migrations.CreateModel(
            name='DigitalGreenCertificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uvci', models.CharField(max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('certificate_type', models.CharField(choices=[('TE', 'Test'), ('RE', 'Recovery'), ('VC', 'Vaccination')], default='TE', max_length=2)),
                ('qrcode', models.TextField(default='')),
                ('notifier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.notifier')),
            ],
        ),
        migrations.CreateModel(
            name='Recovery',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disease', models.CharField(choices=[('XN109', 'SARS-CoV-2')], default='XN109', max_length=32)),
                ('first_positive_test_date', models.DateField()),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('health_professional_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.notifier')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.person')),
            ],
            options={
                'verbose_name_plural': 'Recoveries',
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disease', models.CharField(choices=[('XN109', 'SARS-CoV-2')], default='XN109', max_length=32)),
                ('test_type', models.CharField(choices=[('PC', 'PCR test'), ('AG', 'Rapid antigen test')], default='PC', max_length=2)),
                ('test_name', models.CharField(max_length=128, null=True)),
                ('test_manufacturer', models.CharField(max_length=128, null=True)),
                ('sample_origin', models.CharField(choices=[('461911000124106', 'Oropharyngeal swab'), ('119334006', 'Nasopharyngeal swab'), ('871810001', 'Nasal swab'), ('119342007', 'Saliva')], default='119334006', max_length=32, null=True)),
                ('sample_collection_date_time', models.DateTimeField()),
                ('result', models.CharField(choices=[('897034005', 'SARS-CoV-2 antibody test positive'), ('897035006', 'SARS-CoV-2 antibody test negative')], default='897035006', max_length=32)),
                ('testing_centre', models.CharField(max_length=64)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('health_professional_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.notifier')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.person')),
            ],
        ),
        migrations.CreateModel(
            name='Vaccination',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disease', models.CharField(choices=[('XN109', 'SARS-CoV-2')], default='XN109', max_length=32)),
                ('vaccine', models.CharField(choices=[('1119305005|J07BX03', 'COVID-19 antigen vaccine'), ('1119349007|J07BX03', 'COVID-19 mRNA vaccine')], default='1119349007|J07BX03', max_length=64)),
                ('medicinal_product', models.CharField(choices=[('EMEA/H/C/005735', 'Comirnaty concentrate for dispersion for injection'), ('EMEA/H/C/005737', 'COVID-19 Vaccine Janssen suspension for injection'), ('EMEA/H/C/005791', 'COVID-19 Vaccine Moderna dispersion for injection '), ('EMEA/H/C/005675', 'COVID-19 Vaccine AstraZeneca suspension for injection')], default='EMEA/H/C/005735', max_length=128)),
                ('marketing_authorization_holder', models.CharField(choices=[('ORG-100030215', 'BioNTech Manufacturing GmbH'), ('ORG-100001417', 'Janssen-Cilag International'), ('ORG-100031184', 'Moderna Biotech Spain, S.L.'), ('ORG-100001699', 'Astrazeneca AB')], max_length=128)),
                ('dosage_number', models.CharField(default='1/2', max_length=3, validators=[api.validators.dosage_num_validator])),
                ('batch_number', models.CharField(max_length=32, null=True)),
                ('vaccination_date', models.DateField()),
                ('administering_centre', models.CharField(max_length=128, null=True)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('next_vaccination_date', models.DateField(null=True)),
                ('health_professional_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.notifier')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.person')),
            ],
        ),
    ]
