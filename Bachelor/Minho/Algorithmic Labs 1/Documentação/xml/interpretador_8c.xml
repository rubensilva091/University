<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="interpretador_8c" kind="file" language="C++">
    <compoundname>interpretador.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="string_8h" local="no">string.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">assert.h</includes>
    <includes refid="interpretador_8h" local="yes">interpretador.h</includes>
    <includes refid="token_8h" local="yes">token.h</includes>
    <includes refid="stack_8h" local="yes">stack.h</includes>
    <includes refid="array_8h" local="yes">array.h</includes>
    <incdepgraph>
      <node id="5">
        <label>stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>assert.h</label>
      </node>
      <node id="10">
        <label>array.h</label>
        <link refid="array_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>token.h</label>
        <link refid="token_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>math.h</label>
      </node>
      <node id="1">
        <label>interpretador.c</label>
        <link refid="interpretador_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>interpretador.h</label>
        <link refid="interpretador_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="interpretador_8c_1a70ed59adcb4159ac551058053e649640" prot="public" static="no">
        <name>SIZE</name>
        <initializer>25000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tamanho Padr찾o usado em todo o c처digo </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interpretador.c" line="17" column="9" bodyfile="interpretador.c" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="interpretador_8c_1a70ed59adcb4159ac551058053e649640" prot="public" static="no">
        <name>SIZE</name>
        <initializer>25000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tamanho Padr찾o usado em todo o c처digo </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interpretador.c" line="75" column="9" bodyfile="interpretador.c" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="interpretador_8c_1a4f480ce0a65293c89ac42a11c8c85edb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void interpretadorMain</definition>
        <argsstring>(stack *dados)</argsstring>
        <name>interpretadorMain</name>
        <param>
          <type><ref refid="stack_8h_1a504e59726c5a48f1d3bda9cf9031aa84" kindref="member">stack</ref> *</type>
          <declname>dados</declname>
        </param>
        <briefdescription>
<para>Funcao que liga o interpretador ao main. </para>
        </briefdescription>
        <detaileddescription>
<para>Esta funcao recebe os dados e envia para o interpretador</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dados</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="interpretador.c" line="26" column="6" bodyfile="interpretador.c" bodystart="26" bodyend="29"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="4"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="string_8h" kindref="compound">string.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="interpretador_8h" kindref="compound">interpretador.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="token_8h" kindref="compound">token.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stack_8h" kindref="compound">stack.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="array_8h" kindref="compound">array.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="string_8h" kindref="compound">string.h</ref>&quot;</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor">#define<sp/>SIZE<sp/>25000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8c_1a4f480ce0a65293c89ac42a11c8c85edb" kindref="member">interpretadorMain</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados)</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><ref refid="interpretador_8h_1a95f1751d6d8ce92fb6a8813e25e9c180" kindref="member">interpretador</ref>(dados);</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1a95f1751d6d8ce92fb6a8813e25e9c180" kindref="member">interpretador</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>dados[i].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[i].tag<sp/>!=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a96fa1904db1acb73a95355bf586370c2" kindref="member">numInteiro</ref><sp/>&amp;&amp;<sp/>dados[i].tag<sp/>!=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4abd4cb7990b19a5770868ee8e1349eee1" kindref="member">numFloat</ref><sp/>&amp;&amp;<sp/>dados[i].tag<sp/>!=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a5058d12be77094a8aabc816ff5ee4589" kindref="member">numFloatFunc</ref><sp/>&amp;&amp;<sp/>dados[i].tag<sp/>!=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a49bc34d84e3f7fc582e09b252c596668" kindref="member">numInteiroFunc</ref>)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[i].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4ac1121cbd3727998f80a8ce580afdda5a" kindref="member">expressaoMat</ref>)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1a4cd72d7a32d64d191c5ab6721475acd5" kindref="member">expressaoMatematicaFunc</ref>(dados,<sp/>i);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[i].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a4793036d61f6f2b1fa13c7f500653491" kindref="member">stacks</ref>)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1a3b24f26911df92282d3139093591a5f5" kindref="member">stacksFunc</ref>(dados,<sp/>i);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[i].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a7e1761ec3cd4d743edcf32c04362d765" kindref="member">inputOutput_Conversoes</ref>)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputOutput_converso</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="string_8h" kindref="compound">string.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="interpretador_8h" kindref="compound">interpretador.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="token_8h" kindref="compound">token.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stack_8h" kindref="compound">stack.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="array_8h" kindref="compound">array.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="string_8h" kindref="compound">string.h</ref>&quot;</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor">#define<sp/>SIZE<sp/>25000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8c_1a4f480ce0a65293c89ac42a11c8c85edb" kindref="member">interpretadorMain</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><ref refid="interpretador_8h_1a95f1751d6d8ce92fb6a8813e25e9c180" kindref="member">interpretador</ref>(dados);</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1a95f1751d6d8ce92fb6a8813e25e9c180" kindref="member">interpretador</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados)</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>dados[i].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[i].tag<sp/>!=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a96fa1904db1acb73a95355bf586370c2" kindref="member">numInteiro</ref><sp/>&amp;&amp;<sp/>dados[i].tag<sp/>!=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4abd4cb7990b19a5770868ee8e1349eee1" kindref="member">numFloat</ref><sp/>&amp;&amp;<sp/>dados[i].tag<sp/>!=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a5058d12be77094a8aabc816ff5ee4589" kindref="member">numFloatFunc</ref><sp/>&amp;&amp;<sp/>dados[i].tag<sp/>!=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a49bc34d84e3f7fc582e09b252c596668" kindref="member">numInteiroFunc</ref>)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[i].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4ac1121cbd3727998f80a8ce580afdda5a" kindref="member">expressaoMat</ref>)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1a4cd72d7a32d64d191c5ab6721475acd5" kindref="member">expressaoMatematicaFunc</ref>(dados,<sp/>i);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[i].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a4793036d61f6f2b1fa13c7f500653491" kindref="member">stacks</ref>)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1a3b24f26911df92282d3139093591a5f5" kindref="member">stacksFunc</ref>(dados,<sp/>i);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[i].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a7e1761ec3cd4d743edcf32c04362d765" kindref="member">inputOutput_Conversoes</ref>)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1ab4842b4c3688b9156964d5d068903364" kindref="member">inputOutput_conversoesFunc</ref>(dados,<sp/>i);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[i].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4aa436318dee0f4b88c1c5e2531da0baf6" kindref="member">logica</ref>)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1a6524004eb37dd748dd604871908de8e8" kindref="member">logicaFunc</ref>(dados,<sp/>i);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1a4cd72d7a32d64d191c5ab6721475acd5" kindref="member">expressaoMatematicaFunc</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(dados[pos].caracter[0])</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1a2b00bc20264b2fe2ced44e947ffcc4e8" kindref="member">soma</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1adf146be45ae906bf721220dfddbf8ec6" kindref="member">subtracao</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1ae89b4f5a42af1f8f103ffd7ba74c4049" kindref="member">multiplicacao</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1ab44d2b1c218f430c07eeaccb4718b685" kindref="member">divisao</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1a9913e20960bf804b742bf74b8e73c11e" kindref="member">incrementacao</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1a2eabf2a913f31b51c2cead4fe401dfcb" kindref="member">decrementacao</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1ab9b39806ce719ec0e0d8dc26ad1499e5" kindref="member">exponencializacao</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1ad680e918fdc5950b21b09711215e4123" kindref="member">modulo</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1a01b54c7fea293cdf9209b6ececa73470" kindref="member">bitwise_AND</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;|&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1ab6788283b52628916411858126d02384" kindref="member">bitwise_OR</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;^&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1a2f89c119beea70c6b676c06327d8f2bc" kindref="member">bitwise_XOR</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1aa8414235edd8229cc4dabd063b273eb0" kindref="member">bitwise_NOT</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1a3b24f26911df92282d3139093591a5f5" kindref="member">stacksFunc</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(dados[pos].caracter[0])</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1a5272287f8b6863e03fa05a5fd0f0a899" kindref="member">duplicarStack</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1ace9569f5f609da5015ff36ff6f4d9821" kindref="member">popStack</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1acf1d867f16ae76d566c4e28c8fc64956" kindref="member">trocaStack</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1a62328f8dc0ff87a24f7bdb42cb98b20e" kindref="member">rodaStack</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1a0caf68b950ba1ad1a7d7621b41c40a48" kindref="member">duplicaN_esimoStack</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;N&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a03437c92ee40f569345183c4fba10fcd" kindref="member">createIndex</ref>(dados,<sp/>pos<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1a990584152fc864a1e4ac4c0aea7dac64" kindref="member">separarStringSubstring</ref>(dados,<sp/>pos<sp/>+<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;S&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a03437c92ee40f569345183c4fba10fcd" kindref="member">createIndex</ref>(dados,<sp/>pos<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1a990584152fc864a1e4ac4c0aea7dac64" kindref="member">separarStringSubstring</ref>(dados,<sp/>pos<sp/>+<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1ab4842b4c3688b9156964d5d068903364" kindref="member">inputOutput_conversoesFunc</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(dados[pos].caracter[0])</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1ac2443729400c4b8599da492d0baac2ca" kindref="member">ler</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1ab9a6d6417bb01f0d148640ffcc3783dc" kindref="member">lerT</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1ac6a719c2674f96baf862ae7fbb641a04" kindref="member">interioFUNC</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1ac28ec879c74f0f03ee7f084569fc74c8" kindref="member">floatFUNC</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1aa9592f7af31db6f8e957704d1dd27c43" kindref="member">converterNum_Letra</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1a4a852c9b568fbd72253aef6ca9949c57" kindref="member">preencherVariavel</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1a5ca6209d7b2a25a33388a2d1c957fbc2" kindref="member">rangeFunc</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1a6524004eb37dd748dd604871908de8e8" kindref="member">logicaFunc</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(dados[pos].caracter[0])</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1aee46b827f30767c9959ed7963b89ea21" kindref="member">igualdade</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1a7f961970830d5f092308dff467105465" kindref="member">menor</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1a8130d3010dadee0b27237bc8954ed37b" kindref="member">maior</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1a0c9145f08d5f8f53db3ee8c487d8550c" kindref="member">negacao</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(dados[pos].caracter[1])</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1a8434f9143273f2381f6782392b53b380" kindref="member">e_And</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;|&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1abed118cd4db860d61d2aff6ca3f099a0" kindref="member">e_Or</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1a07de37a9f9669aebe240bcc90040e582" kindref="member">e_menor</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1a0f92bea722f49aa7bed51263210cf59e" kindref="member">e_maior</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interpretador_8h_1ae1d5ea8b79b158aeb00aea349b35b20b" kindref="member">condicional</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1a2b00bc20264b2fe2ced44e947ffcc4e8" kindref="member">soma</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,<sp/>y;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c1<sp/>=<sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c2<sp/>=<sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>z<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref><sp/>||<sp/>dados[pos<sp/>-<sp/>2].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref><sp/>||<sp/>dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>||<sp/>dados[pos<sp/>-<sp/>2].tag<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1ac00009c61037dfcec0917ccb717f8851" kindref="member">juntarString</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="array_8c_1ab0b7eab32645e1c7b8c414e9245004f6" kindref="member">juntarArray</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="stack_8c_1ac3241626d6c15779920214405cad37e4" kindref="member">isfloat</ref>(c1)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/><ref refid="stack_8c_1ac3241626d6c15779920214405cad37e4" kindref="member">isfloat</ref>(c2)<sp/>==<sp/>0))</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)y<sp/>+<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)z);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%f&quot;</highlight><highlight class="normal">,<sp/>(y<sp/>+<sp/>z));</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1adf146be45ae906bf721220dfddbf8ec6" kindref="member">subtracao</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="369"><highlight class="normal">{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,<sp/>y;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c1<sp/>=<sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c2<sp/>=<sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>z<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="stack_8c_1ac3241626d6c15779920214405cad37e4" kindref="member">isfloat</ref>(c1)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/><ref refid="stack_8c_1ac3241626d6c15779920214405cad37e4" kindref="member">isfloat</ref>(c2)<sp/>==<sp/>0))</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)y<sp/>-<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)z);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%f&quot;</highlight><highlight class="normal">,<sp/>(y<sp/>-<sp/>z));</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1ae89b4f5a42af1f8f103ffd7ba74c4049" kindref="member">multiplicacao</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="403"><highlight class="normal">{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,<sp/>y;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c1<sp/>=<sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c2<sp/>=<sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>z<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>2].tag<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>||<sp/>dados[pos<sp/>-<sp/>2].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref>)</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1a5ca149b3b47a14b4c8f33cfae5d439f5" kindref="member">multString</ref>(dados,<sp/>pos,<sp/>z);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="array_8c_1a5ea06a9fb406848573112d4524517c48" kindref="member">multArray</ref>(dados,<sp/>pos,<sp/>z);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="stack_8c_1ac3241626d6c15779920214405cad37e4" kindref="member">isfloat</ref>(c1)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/><ref refid="stack_8c_1ac3241626d6c15779920214405cad37e4" kindref="member">isfloat</ref>(c2)<sp/>==<sp/>0))</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)y<sp/>*<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)z);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%f&quot;</highlight><highlight class="normal">,<sp/>(y<sp/>*<sp/>z));</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1ab44d2b1c218f430c07eeaccb4718b685" kindref="member">divisao</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,<sp/>y;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c1<sp/>=<sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c2<sp/>=<sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>z<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>2].tag<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1a990584152fc864a1e4ac4c0aea7dac64" kindref="member">separarStringSubstring</ref>(dados,<sp/>pos,<sp/>dados[pos<sp/>-<sp/>1].caracter);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="stack_8c_1ac3241626d6c15779920214405cad37e4" kindref="member">isfloat</ref>(c1)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/><ref refid="stack_8c_1ac3241626d6c15779920214405cad37e4" kindref="member">isfloat</ref>(c2)<sp/>==<sp/>0))</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)y<sp/>/<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)z);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%f&quot;</highlight><highlight class="normal">,<sp/>(y<sp/>/<sp/>z));</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1a9913e20960bf804b742bf74b8e73c11e" kindref="member">incrementacao</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="483"><highlight class="normal">{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c1<sp/>=<sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>z<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a93105b68e7bb763789c274fa898cabdc" kindref="member">variavel</ref><sp/>&amp;&amp;<sp/>dados[pos<sp/>-<sp/>1].<ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a93105b68e7bb763789c274fa898cabdc" kindref="member">variavel</ref>[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="array_8c_1a0c39ae7d7c7b3bbe78bac55179074313" kindref="member">ultimoElementoVariavel</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>||<sp/>dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref>)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1ae1cdb431919202c9d56b85874e11a6f9" kindref="member">ultimoElementoString</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="array_8c_1a4f2e7e7705bda16afdcdea5750b4929a" kindref="member">ultimoElemento</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1].tag<sp/>!=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4abd4cb7990b19a5770868ee8e1349eee1" kindref="member">numFloat</ref><sp/>&amp;&amp;<sp/>dados[pos<sp/>-<sp/>1].tag<sp/>!=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a96fa1904db1acb73a95355bf586370c2" kindref="member">numInteiro</ref><sp/>&amp;&amp;<sp/>dados[pos<sp/>-<sp/>1].tag<sp/>!=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a5058d12be77094a8aabc816ff5ee4589" kindref="member">numFloatFunc</ref><sp/>&amp;&amp;<sp/>dados[pos<sp/>-<sp/>1].tag<sp/>!=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a49bc34d84e3f7fc582e09b252c596668" kindref="member">numInteiroFunc</ref>)</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>*c<sp/>=<sp/>*c1<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>dados[pos].<ref refid="structStack_1a7192774d3ffefb08dce588451500a6bb" kindref="member">tag</ref><sp/>=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4ae8cf2e892c4af47906b9bd7244cb499b" kindref="member">nothing</ref>;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="stack_8c_1ac3241626d6c15779920214405cad37e4" kindref="member">isfloat</ref>(c1)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)z<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%f&quot;</highlight><highlight class="normal">,<sp/>(z<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1a2eabf2a913f31b51c2cead4fe401dfcb" kindref="member">decrementacao</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="530"><highlight class="normal">{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c1<sp/>=<sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>z<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a93105b68e7bb763789c274fa898cabdc" kindref="member">variavel</ref><sp/>&amp;&amp;<sp/>dados[pos<sp/>-<sp/>1].<ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a93105b68e7bb763789c274fa898cabdc" kindref="member">variavel</ref>[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="array_8c_1a62853e625c40339e28f52b22d25a3466" kindref="member">primeiroElementoVariavel</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>||<sp/>dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref>)</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1a4d4341338ed016113fef7d2f341c940c" kindref="member">primeiroElementoString</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="array_8c_1a45bf14a7cad7a18bccbeb8b2807a73f4" kindref="member">primeiroElemento</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1].tag<sp/>!=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4abd4cb7990b19a5770868ee8e1349eee1" kindref="member">numFloat</ref><sp/>&amp;&amp;<sp/>dados[pos<sp/>-<sp/>1].tag<sp/>!=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a96fa1904db1acb73a95355bf586370c2" kindref="member">numInteiro</ref><sp/>&amp;&amp;<sp/>dados[pos<sp/>-<sp/>1].tag<sp/>!=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a5058d12be77094a8aabc816ff5ee4589" kindref="member">numFloatFunc</ref><sp/>&amp;&amp;<sp/>dados[pos<sp/>-<sp/>1].tag<sp/>!=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a49bc34d84e3f7fc582e09b252c596668" kindref="member">numInteiroFunc</ref>)</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>*c<sp/>=<sp/>*c1<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>dados[pos].<ref refid="structStack_1a7192774d3ffefb08dce588451500a6bb" kindref="member">tag</ref><sp/>=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4ae8cf2e892c4af47906b9bd7244cb499b" kindref="member">nothing</ref>;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="stack_8c_1ac3241626d6c15779920214405cad37e4" kindref="member">isfloat</ref>(c1)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)z<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%f&quot;</highlight><highlight class="normal">,<sp/>(z<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1ab9b39806ce719ec0e0d8dc26ad1499e5" kindref="member">exponencializacao</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="577"><highlight class="normal">{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,<sp/>y,<sp/>x;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c1<sp/>=<sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c2<sp/>=<sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>z<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>pow(y,<sp/>z);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>2].tag<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>||<sp/>dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1ac182035b7359784c47ec7a6c02886e2f" kindref="member">procurarSubstring</ref>(dados,<sp/>pos,<sp/>dados[pos<sp/>-<sp/>1].caracter);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="stack_8c_1ac3241626d6c15779920214405cad37e4" kindref="member">isfloat</ref>(c1)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/><ref refid="stack_8c_1ac3241626d6c15779920214405cad37e4" kindref="member">isfloat</ref>(c2)<sp/>==<sp/>0))</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)x);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%f&quot;</highlight><highlight class="normal">,<sp/>(x<sp/>+<sp/>0.000004));</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1ad680e918fdc5950b21b09711215e4123" kindref="member">modulo</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="615"><highlight class="normal">{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,<sp/>y;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>z<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)y<sp/>%<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)z));</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1a01b54c7fea293cdf9209b6ececa73470" kindref="member">bitwise_AND</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="638"><highlight class="normal">{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,<sp/>y;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>z<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)y<sp/>&amp;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)z));</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1ab6788283b52628916411858126d02384" kindref="member">bitwise_OR</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="661"><highlight class="normal">{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,<sp/>y;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>z<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)y<sp/>|<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)z));</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1a2f89c119beea70c6b676c06327d8f2bc" kindref="member">bitwise_XOR</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="684"><highlight class="normal">{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,<sp/>y;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>z<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)y<sp/>^<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)z));</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1aa8414235edd8229cc4dabd063b273eb0" kindref="member">bitwise_NOT</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="708"><highlight class="normal">{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>z<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref>)</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="array_8c_1a6e083e60af51a9ae26350b2a98f2c78a" kindref="member">negarArray</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>~(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)z);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="720"><highlight class="normal">}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1a5272287f8b6863e03fa05a5fd0f0a899" kindref="member">duplicarStack</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="734"><highlight class="normal">{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><ref refid="structStack" kindref="compound">stack</ref><sp/>aux1;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref>)</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="array_8c_1a7ed4a6b5abf99c5d2113883b704b9e77" kindref="member">duplicarArray</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>aux1<sp/>=<sp/>dados[pos<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>dados[pos]<sp/>=<sp/>aux1;</highlight></codeline>
<codeline lineno="743"><highlight class="normal">}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1ace9569f5f609da5015ff36ff6f4d9821" kindref="member">popStack</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="757"><highlight class="normal">{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref>)</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="array_8c_1afa70604c067477d7c85a2799dacf9014" kindref="member">POP_ARRAY</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1acf1d867f16ae76d566c4e28c8fc64956" kindref="member">trocaStack</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="779"><highlight class="normal">{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><ref refid="structStack" kindref="compound">stack</ref><sp/>aux1;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><ref refid="structStack" kindref="compound">stack</ref><sp/>aux2;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref><sp/>||<sp/>dados[pos<sp/>-<sp/>2].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref>)</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="array_8c_1a663e2dc1b4b383e31405c335facd3be6" kindref="member">trocaArray_Atomo</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="array_8c_1aa016b61071a073ba1e56ae0c4c7d4f82" kindref="member">trocarArray</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>aux1<sp/>=<sp/>dados[pos<sp/>-<sp/>2];</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>aux2<sp/>=<sp/>dados[pos<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>1]<sp/>=<sp/>aux1;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>2]<sp/>=<sp/>aux2;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1a62328f8dc0ff87a24f7bdb42cb98b20e" kindref="member">rodaStack</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="807"><highlight class="normal">{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><ref refid="structStack" kindref="compound">stack</ref><sp/>aux1;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><ref refid="structStack" kindref="compound">stack</ref><sp/>aux2;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><ref refid="structStack" kindref="compound">stack</ref><sp/>aux3;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref><sp/>||<sp/>dados[pos<sp/>-<sp/>2].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref><sp/>||<sp/>dados[pos<sp/>-<sp/>3].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref>)</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="array_8c_1ace222e6b2ab7db418c84ac70cc9e4d25" kindref="member">rodarStackArray</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>aux1<sp/>=<sp/>dados[pos<sp/>-<sp/>3];</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>aux2<sp/>=<sp/>dados[pos<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>aux3<sp/>=<sp/>dados[pos<sp/>-<sp/>2];</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>1]<sp/>=<sp/>aux1;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>2]<sp/>=<sp/>aux2;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>3]<sp/>=<sp/>aux3;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1a0caf68b950ba1ad1a7d7621b41c40a48" kindref="member">duplicaN_esimoStack</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="836"><highlight class="normal">{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><ref refid="structStack" kindref="compound">stack</ref><sp/>aux1;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/>aux1<sp/>=<sp/>dados[pos<sp/>-<sp/>(2<sp/>+<sp/>x)];</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>1]<sp/>=<sp/>aux1;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="842"><highlight class="normal">}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1ac2443729400c4b8599da492d0baac2ca" kindref="member">ler</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="855"><highlight class="normal">{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>auxInt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>+<sp/>1].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a7e1761ec3cd4d743edcf32c04362d765" kindref="member">inputOutput_Conversoes</ref>)</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(fgets(c,<sp/><ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>,<sp/>stdin)<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>auxInt<sp/>=<sp/>strlen(c);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>c[auxInt<sp/>-<sp/>1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>dados[pos].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>aux[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(fgets(c,<sp/><ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>,<sp/>stdin)<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>auxInt<sp/>=<sp/>strlen(c);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>c[auxInt<sp/>-<sp/>1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>strcat(aux,<sp/>c);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>aux[strlen(aux)<sp/>-<sp/>1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>dados[pos].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>aux;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>dados[pos].<ref refid="structStack_1a7192774d3ffefb08dce588451500a6bb" kindref="member">tag</ref><sp/>=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a6b30bda829e4fe673ed1afb7101a4746" kindref="member">string</ref>;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1ab9a6d6417bb01f0d148640ffcc3783dc" kindref="member">lerT</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="891"><highlight class="normal">{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>auxInt;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>aux[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;;<sp/>i++)</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fgets(c,<sp/><ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>,<sp/>stdin)<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auxInt<sp/>=<sp/>strlen(c);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c[auxInt<sp/>-<sp/>1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c[auxInt<sp/>-<sp/>1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strcat(aux,<sp/>c);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>aux[strlen(aux)<sp/>-<sp/>1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/>dados[pos].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>aux;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>dados[pos].<ref refid="structStack_1a7192774d3ffefb08dce588451500a6bb" kindref="member">tag</ref><sp/>=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a6b30bda829e4fe673ed1afb7101a4746" kindref="member">string</ref>;</highlight></codeline>
<codeline lineno="915"><highlight class="normal">}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1ac6a719c2674f96baf862ae7fbb641a04" kindref="member">interioFUNC</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="928"><highlight class="normal">{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>auxInt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c1<sp/>=<sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>auxInt<sp/>=<sp/>*c1<sp/>-<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>+<sp/>97;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>auxInt);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aux<sp/>=<sp/>atof(dados[pos<sp/>-<sp/>1].caracter);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>aux);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1a7192774d3ffefb08dce588451500a6bb" kindref="member">tag</ref><sp/>=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a49bc34d84e3f7fc582e09b252c596668" kindref="member">numInteiroFunc</ref>;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="945"><highlight class="normal">}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1ac28ec879c74f0f03ee7f084569fc74c8" kindref="member">floatFUNC</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="958"><highlight class="normal">{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>auxFloat<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c1<sp/>=<sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>auxFloat<sp/>=<sp/>*c1<sp/>-<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>+<sp/>97;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%f&quot;</highlight><highlight class="normal">,<sp/>auxFloat);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%f&quot;</highlight><highlight class="normal">,<sp/>atof(dados[pos<sp/>-<sp/>1].caracter));</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1a7192774d3ffefb08dce588451500a6bb" kindref="member">tag</ref><sp/>=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a5058d12be77094a8aabc816ff5ee4589" kindref="member">numFloatFunc</ref>;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1aa9592f7af31db6f8e957704d1dd27c43" kindref="member">converterNum_Letra</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="987"><highlight class="normal">{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>auxInt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>auxInt<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/>*c<sp/>=<sp/>auxInt;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1a7192774d3ffefb08dce588451500a6bb" kindref="member">tag</ref><sp/>=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a6b30bda829e4fe673ed1afb7101a4746" kindref="member">string</ref>;</highlight></codeline>
<codeline lineno="995"><highlight class="normal">}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1a4a852c9b568fbd72253aef6ca9949c57" kindref="member">preencherVariavel</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="1009"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c1<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c2<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref>)</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/><ref refid="array_8c_1a59bde5e176b93ebb9343dad95013876a" kindref="member">preencherVariavelArray</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="token_8h_1a570da5cd03465a115199d7f328103c6d" kindref="member">variavelFantasmaFunc</ref>(dados,<sp/>pos<sp/>-<sp/>x<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="token_8h_1af54b38316fc91e1b061309e324be7eec" kindref="member">reVariaveisInterpretador</ref>(dados,<sp/>pos<sp/>-<sp/>x<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/>c1[0]<sp/>=<sp/>dados[pos].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>[1];</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>c2<sp/>=<sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/>dados[pos].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c1;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>dados[pos].<ref refid="structStack_1a88a7aff3a52bd5cf0354601eaa55a310" kindref="member">variavel</ref><sp/>=<sp/>c2;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><ref refid="token_8h_1a570da5cd03465a115199d7f328103c6d" kindref="member">variavelFantasmaFunc</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><ref refid="token_8h_1af54b38316fc91e1b061309e324be7eec" kindref="member">reVariaveisInterpretador</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1aee46b827f30767c9959ed7963b89ea21" kindref="member">igualdade</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="1040"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,<sp/>y;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/>z<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>2].tag<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1a01b769313ac104c9465c2ecf2e715520" kindref="member">compararStrings</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>2].<ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a93105b68e7bb763789c274fa898cabdc" kindref="member">variavel</ref>[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/><ref refid="array_8c_1a0344eb1887db9a69fef65dd458d6667e" kindref="member">normalizarVariavelArray</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a03437c92ee40f569345183c4fba10fcd" kindref="member">createIndex</ref>(dados,<sp/>pos<sp/>+<sp/>1<sp/>+<sp/>y);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a5bd721ef49e0397534dd2d6e76b20393" kindref="member">substituirStack</ref>(dados,<sp/>pos<sp/>+<sp/>1<sp/>+<sp/>y,<sp/>dados[pos<sp/>-<sp/>1].caracter);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a8614fd455aff434b3c69b38e7378855a" kindref="member">swap</ref>(dados,<sp/>pos<sp/>+<sp/>1<sp/>+<sp/>y);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>2].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref><sp/>||<sp/>dados[pos<sp/>-<sp/>2].tag<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>||<sp/>dados[pos<sp/>-<sp/>2].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a93105b68e7bb763789c274fa898cabdc" kindref="member">variavel</ref>)</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1ad60716472d4e1eb5f45babb2d1ae27dc" kindref="member">pesquisarStringIndex</ref>(dados,<sp/>pos,<sp/>z);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="array_8c_1afcd1d506dfde77ac82644a8670fc591e" kindref="member">pesquisarArrayIndex</ref>(dados,<sp/>pos,<sp/>z);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>==<sp/>z)</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1a7f961970830d5f092308dff467105465" kindref="member">menor</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="1091"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,<sp/>y;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/>z<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>2].tag<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1a3357a77d3608c00b66520b4ec5c02c37" kindref="member">menorString</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>2].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref><sp/>||<sp/>dados[pos<sp/>-<sp/>2].tag<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1a3dfc34acf58079cf9524a8b00a6e5965" kindref="member">buscarN_elementosMenorString</ref>(dados,<sp/>pos,<sp/>z);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="array_8c_1a12c256669527392f061b11fa7882a5ce" kindref="member">buscarN_elementosMenor</ref>(dados,<sp/>pos,<sp/>z);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>z)</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1a8130d3010dadee0b27237bc8954ed37b" kindref="member">maior</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="1132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,<sp/>y;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/>z<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>2].tag<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1a6585f4615a54194b4a9ed3dd7359bf2d" kindref="member">maiorString</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>2].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref><sp/>||<sp/>dados[pos<sp/>-<sp/>2].tag<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1a7a8520495aecf4cd49b0a511096260ad" kindref="member">buscarN_elementosMaiorString</ref>(dados,<sp/>pos,<sp/>z);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="array_8c_1aee632d2e5abb50c9cab2ee19b4a7df5e" kindref="member">buscarN_elementosMaior</ref>(dados,<sp/>pos,<sp/>z);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>z)</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1a0c9145f08d5f8f53db3ee8c487d8550c" kindref="member">negacao</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="1172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/>z<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>!=<sp/>0<sp/>||<sp/>(dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>dados[pos<sp/>-<sp/>1].caracter[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1a07de37a9f9669aebe240bcc90040e582" kindref="member">e_menor</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="1199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,<sp/>y;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c1<sp/>=<sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c2<sp/>=<sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/>z<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>2].tag<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1a8b1f7d8d40f17420d37ecac3404d9c9e" kindref="member">e_menorString</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>z)</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)y);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="stack_8c_1ac3241626d6c15779920214405cad37e4" kindref="member">isfloat</ref>(c2)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%f&quot;</highlight><highlight class="normal">,<sp/>y);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)z);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="stack_8c_1ac3241626d6c15779920214405cad37e4" kindref="member">isfloat</ref>(c1)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%f&quot;</highlight><highlight class="normal">,<sp/>z);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1a0f92bea722f49aa7bed51263210cf59e" kindref="member">e_maior</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="1243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,<sp/>y;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c1<sp/>=<sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c2<sp/>=<sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/>z<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>2].tag<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1a15a84340c8b04e0b750e85ebb934cb82" kindref="member">e_maiorString</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>z)</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)y);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="stack_8c_1ac3241626d6c15779920214405cad37e4" kindref="member">isfloat</ref>(c2)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%f&quot;</highlight><highlight class="normal">,<sp/>y);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)z);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="stack_8c_1ac3241626d6c15779920214405cad37e4" kindref="member">isfloat</ref>(c1)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%f&quot;</highlight><highlight class="normal">,<sp/>z);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1a8434f9143273f2381f6782392b53b380" kindref="member">e_And</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="1287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,<sp/>y;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c1<sp/>=<sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/>z<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>==<sp/>0<sp/>||<sp/>z<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>z)</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)z);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="stack_8c_1ac3241626d6c15779920214405cad37e4" kindref="member">isfloat</ref>(c1)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%f&quot;</highlight><highlight class="normal">,<sp/>z);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1abed118cd4db860d61d2aff6ca3f099a0" kindref="member">e_Or</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="1325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,<sp/>y;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c1<sp/>=<sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/>z<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>z<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>y<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>z)</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)z);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="stack_8c_1ac3241626d6c15779920214405cad37e4" kindref="member">isfloat</ref>(c1)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%f&quot;</highlight><highlight class="normal">,<sp/>z);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)z);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="stack_8c_1ac3241626d6c15779920214405cad37e4" kindref="member">isfloat</ref>(c1)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(c,<sp/></highlight><highlight class="stringliteral">&quot;%f&quot;</highlight><highlight class="normal">,<sp/>z);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1ae1d5ea8b79b158aeb00aea349b35b20b" kindref="member">condicional</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="1377"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>3);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>3].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref>)</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>4);</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>3);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>3].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="array_8c_1afa70604c067477d7c85a2799dacf9014" kindref="member">POP_ARRAY</ref>(dados,<sp/>pos<sp/>-<sp/>3);</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>4);</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpretador_8h_1a5ca6209d7b2a25a33388a2d1c957fbc2" kindref="member">rangeFunc</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="1420"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/><ref refid="stack_8c_1aa407d9770c918dc8042ff844c51b07fa" kindref="member">PUSH</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref><sp/>||<sp/>dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>||<sp/>dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a93105b68e7bb763789c274fa898cabdc" kindref="member">variavel</ref>)</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string_8h_1a4d19b8a47fc6295ccdc09947f1925c82" kindref="member">rangeString</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="array_8c_1abb214e1878bfe9e0f91176df466467ed" kindref="member">rangeArray</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a5bd721ef49e0397534dd2d6e76b20393" kindref="member">substituirStack</ref>(dados,<sp/>pos,<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>z;<sp/>t++)</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux<sp/>=<sp/>malloc(<ref refid="interpretador_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(aux,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>z<sp/>-<sp/>t<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a03437c92ee40f569345183c4fba10fcd" kindref="member">createIndex</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/>dados[pos].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>aux;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a5bd721ef49e0397534dd2d6e76b20393" kindref="member">substituirStack</ref>(dados,<sp/>pos<sp/>-<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1438"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="interpretador.c"/>
  </compounddef>
</doxygen>
