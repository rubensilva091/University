<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="array_8c" kind="file" language="C++">
    <compoundname>array.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="string_8h" local="no">string.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">assert.h</includes>
    <includes refid="interpretador_8h" local="yes">interpretador.h</includes>
    <includes refid="token_8h" local="yes">token.h</includes>
    <includes refid="stack_8h" local="yes">stack.h</includes>
    <includes refid="array_8h" local="yes">array.h</includes>
    <incdepgraph>
      <node id="5">
        <label>stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>assert.h</label>
      </node>
      <node id="1">
        <label>array.c</label>
        <link refid="array_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>array.h</label>
        <link refid="array_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>token.h</label>
        <link refid="token_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>math.h</label>
      </node>
      <node id="6">
        <label>interpretador.h</label>
        <link refid="interpretador_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="array_8c_1a70ed59adcb4159ac551058053e649640" prot="public" static="no">
        <name>SIZE</name>
        <initializer>25000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tamanho Padrão usado em todo o código </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="array.c" line="17" column="9" bodyfile="array.c" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="array_8c_1a599e932c3c42141d379425c37436485d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int encontrarLimiteInferior</definition>
        <argsstring>(stack *dados, int pos)</argsstring>
        <name>encontrarLimiteInferior</name>
        <param>
          <type><ref refid="stack_8h_1a504e59726c5a48f1d3bda9cf9031aa84" kindref="member">stack</ref> *</type>
          <declname>dados</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Funcao do Array &quot;EncontraLimiteInferior&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Esta funcao recebe os dados recebe os dados e a posicao atual do Array Dado a posição do limite inferior, esta funcao vai descobrir o inferior para uma localização aritmetica do array</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dados</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a posicao atual da stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(i+1) a posicao aritmetica + 1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="array.c" line="30" column="5" bodyfile="array.c" bodystart="30" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="array_8c_1ab0b7eab32645e1c7b8c414e9245004f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void juntarArray</definition>
        <argsstring>(stack *dados, int pos)</argsstring>
        <name>juntarArray</name>
        <param>
          <type><ref refid="stack_8h_1a504e59726c5a48f1d3bda9cf9031aa84" kindref="member">stack</ref> *</type>
          <declname>dados</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Funcao do Array &quot;juntarArray&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Esta funcao recebe os dados recebe os dados e a posicao atual do Array Esta funcao vai juntar 2 arrays de duas maneiras: 1 -&gt; se for 2 arrays, vai simplesmente dar POP dos limites internos dos dois, fazem assim um concat 2 -&gt; se for 1 array e algo diferente de um array, simplesmente vai dar swap na sua posição</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dados</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a posicao atual da stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="array.c" line="52" column="6" bodyfile="array.c" bodystart="52" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="array_8c_1aa016b61071a073ba1e56ae0c4c7d4f82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trocarArray</definition>
        <argsstring>(stack *dados, int pos)</argsstring>
        <name>trocarArray</name>
        <param>
          <type><ref refid="stack_8h_1a504e59726c5a48f1d3bda9cf9031aa84" kindref="member">stack</ref> *</type>
          <declname>dados</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Funcao do Array &quot;trocaArray&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Esta funcao recebe os dados recebe os dados e a posicao atual do Array Para trocar o array, visto este estar diretamente presente na <ref refid="structStack" kindref="compound">Stack</ref> Primeiro descubrirmos todos os limites Existe uma reversão individual de cada Array e uma posterior reversão total, como exemplo abaixo: [ 1 2 3 ] [ 7 8 9 ] \ -&gt; ] 3 2 1 [ ] 9 8 7 [ -&gt; [ 7 8 9 ] [ 3 2 1 ]</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dados</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a posicao atual da stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="array.c" line="89" column="6" bodyfile="array.c" bodystart="89" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="array_8c_1a1ae174194418027d69d3a34367e0fe2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverseArray</definition>
        <argsstring>(stack *dados, int pos)</argsstring>
        <name>reverseArray</name>
        <param>
          <type><ref refid="stack_8h_1a504e59726c5a48f1d3bda9cf9031aa84" kindref="member">stack</ref> *</type>
          <declname>dados</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Funcao do Array &quot;reverseArray&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Esta funcao recebe os dados recebe os dados e a posicao atual do Array Funcao utilizada na funcao, &quot;trocaArray&quot; Esta funcao reverte 1 array dado o limite superior</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dados</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a posicao atual da stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="array.c" line="122" column="6" bodyfile="array.c" bodystart="122" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="array_8c_1a5ea06a9fb406848573112d4524517c48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void multArray</definition>
        <argsstring>(stack *dados, int pos, int valor)</argsstring>
        <name>multArray</name>
        <param>
          <type><ref refid="stack_8h_1a504e59726c5a48f1d3bda9cf9031aa84" kindref="member">stack</ref> *</type>
          <declname>dados</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>valor</declname>
        </param>
        <briefdescription>
<para>Funcao do Array &quot;multArray&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Esta funcao recebe os dados recebe os dados e a posicao atual do Array Esta funcao escreve varias vezes o array pretendido e dps junta-os</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dados</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a posicao atual da stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="array.c" line="146" column="6" bodyfile="array.c" bodystart="146" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="array_8c_1afcd1d506dfde77ac82644a8670fc591e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pesquisarArrayIndex</definition>
        <argsstring>(stack *dados, int pos, int valor)</argsstring>
        <name>pesquisarArrayIndex</name>
        <param>
          <type><ref refid="stack_8h_1a504e59726c5a48f1d3bda9cf9031aa84" kindref="member">stack</ref> *</type>
          <declname>dados</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>valor</declname>
        </param>
        <briefdescription>
<para>Funcao do Array &quot;pesquisarArrayIndex&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Esta funcao recebe os dados recebe os dados e a posicao atual do Array Esta funcao pesquisa no Array e se existir susbtitui fora do array No fim apaga o array todo</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dados</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a posicao atual da stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="array.c" line="180" column="6" bodyfile="array.c" bodystart="180" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="array_8c_1afa70604c067477d7c85a2799dacf9014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void POP_ARRAY</definition>
        <argsstring>(stack *dados, int pos)</argsstring>
        <name>POP_ARRAY</name>
        <param>
          <type><ref refid="stack_8h_1a504e59726c5a48f1d3bda9cf9031aa84" kindref="member">stack</ref> *</type>
          <declname>dados</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Funcao do Array &quot;POP_ARRAY&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Esta funcao recebe os dados recebe os dados e a posicao atual do Array Esta funcao apaga o array todo baseado no limite inferior</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dados</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a posicao atual da stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="array.c" line="202" column="6" bodyfile="array.c" bodystart="202" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="array_8c_1a6e083e60af51a9ae26350b2a98f2c78a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void negarArray</definition>
        <argsstring>(stack *dados, int pos)</argsstring>
        <name>negarArray</name>
        <param>
          <type><ref refid="stack_8h_1a504e59726c5a48f1d3bda9cf9031aa84" kindref="member">stack</ref> *</type>
          <declname>dados</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Funcao do Array &quot;negarArray&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Esta funcao recebe os dados recebe os dados e a posicao atual do Array Esta funcao apaga os limites do array</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dados</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a posicao atual da stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="array.c" line="221" column="6" bodyfile="array.c" bodystart="221" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="array_8c_1abb214e1878bfe9e0f91176df466467ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rangeArray</definition>
        <argsstring>(stack *dados, int pos)</argsstring>
        <name>rangeArray</name>
        <param>
          <type><ref refid="stack_8h_1a504e59726c5a48f1d3bda9cf9031aa84" kindref="member">stack</ref> *</type>
          <declname>dados</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Funcao do Array &quot;rangeArray&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Esta funcao recebe os dados recebe os dados e a posicao atual do Array Esta funcao calcula o tamanho do Array e coloca o valor na stack No final apaga o array</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dados</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a posicao atual da stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="array.c" line="239" column="6" bodyfile="array.c" bodystart="239" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="array_8c_1aee632d2e5abb50c9cab2ee19b4a7df5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void buscarN_elementosMaior</definition>
        <argsstring>(stack *dados, int pos, int valor)</argsstring>
        <name>buscarN_elementosMaior</name>
        <param>
          <type><ref refid="stack_8h_1a504e59726c5a48f1d3bda9cf9031aa84" kindref="member">stack</ref> *</type>
          <declname>dados</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>valor</declname>
        </param>
        <briefdescription>
<para>Funcao do Array &quot;buscarN_elementosMaior&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Esta funcao recebe os dados recebe os dados e a posicao atual do Array Esta funcao vai buscar os valores por ordem decrescente no array baseado no input do utilizador No final apaga o array</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dados</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a posicao atual da stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="array.c" line="262" column="6" bodyfile="array.c" bodystart="262" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="array_8c_1a12c256669527392f061b11fa7882a5ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void buscarN_elementosMenor</definition>
        <argsstring>(stack *dados, int pos, int valor)</argsstring>
        <name>buscarN_elementosMenor</name>
        <param>
          <type><ref refid="stack_8h_1a504e59726c5a48f1d3bda9cf9031aa84" kindref="member">stack</ref> *</type>
          <declname>dados</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>valor</declname>
        </param>
        <briefdescription>
<para>Funcao do Array &quot;buscarN_elementosMenor&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Esta funcao recebe os dados recebe os dados e a posicao atual do Array Esta funcao vai buscar os valores por ordem crescente no array baseado no input do utilizador No final apaga o array</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dados</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a posicao atual da stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="array.c" line="292" column="6" bodyfile="array.c" bodystart="292" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="array_8c_1a4f2e7e7705bda16afdcdea5750b4929a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ultimoElemento</definition>
        <argsstring>(stack *dados, int pos)</argsstring>
        <name>ultimoElemento</name>
        <param>
          <type><ref refid="stack_8h_1a504e59726c5a48f1d3bda9cf9031aa84" kindref="member">stack</ref> *</type>
          <declname>dados</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Funcao do Array &quot;ultimoElemento&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Esta funcao recebe os dados recebe os dados e a posicao atual do Array Esta funcao vai buscar o ultimo Elemento do array Retira-o da stack e coloca-o à frente</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dados</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a posicao atual da stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="array.c" line="323" column="6" bodyfile="array.c" bodystart="323" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="array_8c_1a45bf14a7cad7a18bccbeb8b2807a73f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void primeiroElemento</definition>
        <argsstring>(stack *dados, int pos)</argsstring>
        <name>primeiroElemento</name>
        <param>
          <type><ref refid="stack_8h_1a504e59726c5a48f1d3bda9cf9031aa84" kindref="member">stack</ref> *</type>
          <declname>dados</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Funcao do Array &quot;primeiroElemento&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Esta funcao recebe os dados recebe os dados e a posicao atual do Array Esta funcao vai buscar o primeiro Elemento do array Retira-o da stack e coloca-o à frente</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dados</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a posicao atual da stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="array.c" line="342" column="6" bodyfile="array.c" bodystart="342" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="array_8c_1a7ed4a6b5abf99c5d2113883b704b9e77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void duplicarArray</definition>
        <argsstring>(stack *dados, int pos)</argsstring>
        <name>duplicarArray</name>
        <param>
          <type><ref refid="stack_8h_1a504e59726c5a48f1d3bda9cf9031aa84" kindref="member">stack</ref> *</type>
          <declname>dados</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Funcao do Array &quot;duplicarArray&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Esta funcao recebe os dados recebe os dados e a posicao atual do Array Esta funcao duplica o Array usando a funcao multArray e depois adiciona os limites</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dados</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a posicao atual da stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="array.c" line="363" column="6" bodyfile="array.c" bodystart="363" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="array_8c_1a663e2dc1b4b383e31405c335facd3be6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trocaArray_Atomo</definition>
        <argsstring>(stack *dados, int pos)</argsstring>
        <name>trocaArray_Atomo</name>
        <param>
          <type><ref refid="stack_8h_1a504e59726c5a48f1d3bda9cf9031aa84" kindref="member">stack</ref> *</type>
          <declname>dados</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Funcao do Array &quot;trocaArray_atomo&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Esta funcao recebe os dados recebe os dados e a posicao atual do Array Esta funcao existe para possibilitar a troca de um Array e de um membro da stack É feita a verificacao da posicao de este membro, e depois é feita a troca</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dados</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a posicao atual da stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="array.c" line="384" column="6" bodyfile="array.c" bodystart="384" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="array_8c_1ace222e6b2ab7db418c84ac70cc9e4d25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rodarStackArray</definition>
        <argsstring>(stack *dados, int pos)</argsstring>
        <name>rodarStackArray</name>
        <param>
          <type><ref refid="stack_8h_1a504e59726c5a48f1d3bda9cf9031aa84" kindref="member">stack</ref> *</type>
          <declname>dados</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Funcao do Array &quot;rodarStackArray&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Esta funcao recebe os dados recebe os dados e a posicao atual do Array Esta Funcao roda a stack usando um ciclo e adicionado o &quot;\&quot; para executar a troca de Array</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dados</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a posicao atual da stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="array.c" line="415" column="6" bodyfile="array.c" bodystart="415" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="array_8c_1a59bde5e176b93ebb9343dad95013876a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int preencherVariavelArray</definition>
        <argsstring>(stack *dados, int pos)</argsstring>
        <name>preencherVariavelArray</name>
        <param>
          <type><ref refid="stack_8h_1a504e59726c5a48f1d3bda9cf9031aa84" kindref="member">stack</ref> *</type>
          <declname>dados</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Funcao do Array &quot;preencherVariavelArray&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Esta funcao recebe os dados recebe os dados e a posicao atual do Array Funcao que Remove o Array da stack ao mesmo que tempo que o adiciona na Variavel Caso seja array de array é usado outra funcao</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dados</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a posicao atual da stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="array.c" line="440" column="5" bodyfile="array.c" bodystart="440" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="array_8c_1ae284c646d45c54e7348eecec1b18bcc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void preencherVariavelArrayArray</definition>
        <argsstring>(stack *dados, int pos)</argsstring>
        <name>preencherVariavelArrayArray</name>
        <param>
          <type><ref refid="stack_8h_1a504e59726c5a48f1d3bda9cf9031aa84" kindref="member">stack</ref> *</type>
          <declname>dados</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Funcao do Array &quot;preencherVariavelArrayArray&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Esta funcao recebe os dados recebe os dados e a posicao atual do Array Funcao que Remove os Arrays de um Array e coloca-os em variaveis para estes poderem ser processador mais facilmente As novas variaveis vao para o array principal</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dados</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a posicao atual da stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="array.c" line="475" column="6" bodyfile="array.c" bodystart="475" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="array_8c_1a0344eb1887db9a69fef65dd458d6667e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int normalizarVariavelArray</definition>
        <argsstring>(stack *dados, int pos)</argsstring>
        <name>normalizarVariavelArray</name>
        <param>
          <type><ref refid="stack_8h_1a504e59726c5a48f1d3bda9cf9031aa84" kindref="member">stack</ref> *</type>
          <declname>dados</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Funcao do Array &quot;normalizarArray&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Esta funcao recebe os dados recebe os dados e a posicao atual do Array Funcao que normaliza o Array dentro da variavel colocando na stack</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dados</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a posicao atual da stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="array.c" line="505" column="5" bodyfile="array.c" bodystart="505" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="array_8c_1a4cdb77251d2d2d392217c44cac3d4b00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mostrarVariavelArray</definition>
        <argsstring>(stack *dados, int pos)</argsstring>
        <name>mostrarVariavelArray</name>
        <param>
          <type><ref refid="stack_8h_1a504e59726c5a48f1d3bda9cf9031aa84" kindref="member">stack</ref> *</type>
          <declname>dados</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Funcao do Array &quot;mostraVariavelArray&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Esta funcao recebe os dados recebe os dados e a posicao atual do Array Funcao que usada para ocultar os limites e todo tipo de simbolo nao pretendido no final da stack quando mostrado ao utilizador</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dados</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a posicao atual da stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="array.c" line="532" column="6" bodyfile="array.c" bodystart="532" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="array_8c_1a62853e625c40339e28f52b22d25a3466" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void primeiroElementoVariavel</definition>
        <argsstring>(stack *dados, int pos)</argsstring>
        <name>primeiroElementoVariavel</name>
        <param>
          <type><ref refid="stack_8h_1a504e59726c5a48f1d3bda9cf9031aa84" kindref="member">stack</ref> *</type>
          <declname>dados</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Funcao do Array &quot;primeiroElementoVariavel&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Esta funcao recebe os dados recebe os dados e a posicao atual do Array Funcao que usa a normalizacao para colocar a informacao da variavel na stack e depois coloca o simbolo &quot;(&quot; para executar a funcao</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dados</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a posicao atual da stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="array.c" line="582" column="6" bodyfile="array.c" bodystart="582" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="array_8c_1a0c39ae7d7c7b3bbe78bac55179074313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ultimoElementoVariavel</definition>
        <argsstring>(stack *dados, int pos)</argsstring>
        <name>ultimoElementoVariavel</name>
        <param>
          <type><ref refid="stack_8h_1a504e59726c5a48f1d3bda9cf9031aa84" kindref="member">stack</ref> *</type>
          <declname>dados</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Funcao do Array &quot;primeiroElementoVariavel&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Esta funcao recebe os dados recebe os dados e a posicao atual do Array Funcao que usa a normalizacao para colocar a informacao da variavel na stack e depois coloca o simbolo &quot;)&quot; para executar a funcao</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dados</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>receber a posicao atual da stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="array.c" line="600" column="6" bodyfile="array.c" bodystart="600" bodyend="607"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="4"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="string_8h" kindref="compound">string.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="interpretador_8h" kindref="compound">interpretador.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="token_8h" kindref="compound">token.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stack_8h" kindref="compound">stack.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="array_8h" kindref="compound">array.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="string_8h" kindref="compound">string.h</ref>&quot;</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor">#define<sp/>SIZE<sp/>25000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="array_8c_1a599e932c3c42141d379425c37436485d" kindref="member">encontrarLimiteInferior</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1a7192774d3ffefb08dce588451500a6bb" kindref="member">tag</ref><sp/>!=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref><sp/>&amp;&amp;<sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>pos--;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="array_8c_1ab0b7eab32645e1c7b8c414e9245004f6" kindref="member">juntarArray</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref><sp/>||<sp/>dados[pos<sp/>-<sp/>2].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref>)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/><ref refid="array_8c_1a599e932c3c42141d379425c37436485d" kindref="member">encontrarLimiteInferior</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>x<sp/>-<sp/>1].tag<sp/>!=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref>)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref>)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a8614fd455aff434b3c69b38e7378855a" kindref="member">swap</ref>(dados,<sp/>pos<sp/>-<sp/>x);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a8614fd455aff434b3c69b38e7378855a" kindref="member">swap</ref>(dados,<sp/>pos<sp/>-<sp/>x<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>x);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>x<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="array_8c_1aa016b61071a073ba1e56ae0c4c7d4f82" kindref="member">trocarArray</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="90"><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/><ref refid="array_8c_1a599e932c3c42141d379425c37436485d" kindref="member">encontrarLimiteInferior</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref><sp/>&amp;&amp;<sp/>dados[pos<sp/>-<sp/>x<sp/>-<sp/>2].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref>)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos2<sp/>=<sp/>pos<sp/>-<sp/><ref refid="array_8c_1a599e932c3c42141d379425c37436485d" kindref="member">encontrarLimiteInferior</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos3<sp/>=<sp/>pos2<sp/>-<sp/><ref refid="array_8c_1a599e932c3c42141d379425c37436485d" kindref="member">encontrarLimiteInferior</ref>(dados,<sp/>pos2);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>pos<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="array_8c_1a1ae174194418027d69d3a34367e0fe2e" kindref="member">reverseArray</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="array_8c_1a1ae174194418027d69d3a34367e0fe2e" kindref="member">reverseArray</ref>(dados,<sp/>pos2);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>pos3;<sp/>i<sp/>&lt;<sp/>end;<sp/>i++)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structStack" kindref="compound">stack</ref><sp/>aux<sp/>=<sp/>dados[i];</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dados[i]<sp/>=<sp/>dados[end];</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dados[end]<sp/>=<sp/>aux;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end--;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="array_8c_1a1ae174194418027d69d3a34367e0fe2e" kindref="member">reverseArray</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end<sp/>=<sp/><ref refid="array_8c_1a599e932c3c42141d379425c37436485d" kindref="member">encontrarLimiteInferior</ref>(dados,<sp/>pos)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>end<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i++)<sp/></highlight><highlight class="comment">/*Começa<sp/>em<sp/>1<sp/>para<sp/>ignorar<sp/>os<sp/>paranteses*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structStack" kindref="compound">stack</ref><sp/>aux<sp/>=<sp/>dados[pos<sp/>-<sp/>1<sp/>-<sp/>i];</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>dados[pos<sp/>-<sp/>1<sp/>-<sp/>i]<sp/>=<sp/>dados[pos<sp/>-<sp/>x<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>dados[pos<sp/>-<sp/>x<sp/>+<sp/>i]<sp/>=<sp/>aux;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>end--;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="array_8c_1a5ea06a9fb406848573112d4524517c48" kindref="member">multArray</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>valor)</highlight></codeline>
<codeline lineno="147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>2].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref>)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>t,<sp/>x,<sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/><ref refid="array_8c_1a599e932c3c42141d379425c37436485d" kindref="member">encontrarLimiteInferior</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>valor<sp/>-<sp/>1;<sp/>i<sp/>&gt;<sp/>0;<sp/>i--)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>x;<sp/>t++)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux<sp/>=<sp/>malloc(<ref refid="array_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(aux,<sp/>dados[pos<sp/>-<sp/>x<sp/>+<sp/>t<sp/>-<sp/>1].caracter);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a03437c92ee40f569345183c4fba10fcd" kindref="member">createIndex</ref>(dados,<sp/>pos<sp/>-<sp/>1<sp/>+<sp/>counter);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dados[pos<sp/>-<sp/>1<sp/>+<sp/>counter].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>aux;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter++;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a03437c92ee40f569345183c4fba10fcd" kindref="member">createIndex</ref>(dados,<sp/>pos<sp/>-<sp/>1<sp/>+<sp/>counter);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a5bd721ef49e0397534dd2d6e76b20393" kindref="member">substituirStack</ref>(dados,<sp/>pos<sp/>-<sp/>1<sp/>+<sp/>counter,<sp/></highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="array_8c_1afcd1d506dfde77ac82644a8670fc591e" kindref="member">pesquisarArrayIndex</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>valor)</highlight></codeline>
<codeline lineno="181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>2].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref>)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux<sp/>=<sp/>malloc(<ref refid="array_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/><ref refid="array_8c_1a599e932c3c42141d379425c37436485d" kindref="member">encontrarLimiteInferior</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(aux,<sp/>dados[pos<sp/>-<sp/>x<sp/>-<sp/>1<sp/>+<sp/>valor].caracter);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>aux;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="array_8c_1afa70604c067477d7c85a2799dacf9014" kindref="member">POP_ARRAY</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="array_8c_1afa70604c067477d7c85a2799dacf9014" kindref="member">POP_ARRAY</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="203"><highlight class="normal">{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/><ref refid="array_8c_1a599e932c3c42141d379425c37436485d" kindref="member">encontrarLimiteInferior</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>x;<sp/>i++)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>x);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="array_8c_1a6e083e60af51a9ae26350b2a98f2c78a" kindref="member">negarArray</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/><ref refid="array_8c_1a599e932c3c42141d379425c37436485d" kindref="member">encontrarLimiteInferior</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>x);</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="array_8c_1abb214e1878bfe9e0f91176df466467ed" kindref="member">rangeArray</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref>)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux<sp/>=<sp/>malloc(<ref refid="array_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/><ref refid="array_8c_1a599e932c3c42141d379425c37436485d" kindref="member">encontrarLimiteInferior</ref>(dados,<sp/>pos)<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(aux,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>x);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>aux;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="array_8c_1afa70604c067477d7c85a2799dacf9014" kindref="member">POP_ARRAY</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="array_8c_1aee632d2e5abb50c9cab2ee19b4a7df5e" kindref="member">buscarN_elementosMaior</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>valor)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>2].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref>)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>valor;<sp/>i<sp/>&gt;<sp/>0;<sp/>i--)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux<sp/>=<sp/>malloc(<ref refid="array_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(aux,<sp/>dados[pos<sp/>-<sp/>i<sp/>-<sp/>2].caracter);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a03437c92ee40f569345183c4fba10fcd" kindref="member">createIndex</ref>(dados,<sp/>pos<sp/>-<sp/>2<sp/>+<sp/>counter);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dados[pos<sp/>-<sp/>2<sp/>+<sp/>counter].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>aux;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>counter++;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="array_8c_1afa70604c067477d7c85a2799dacf9014" kindref="member">POP_ARRAY</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="array_8c_1a12c256669527392f061b11fa7882a5ce" kindref="member">buscarN_elementosMenor</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>valor)</highlight></codeline>
<codeline lineno="293"><highlight class="normal">{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>2].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref>)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/><ref refid="array_8c_1a599e932c3c42141d379425c37436485d" kindref="member">encontrarLimiteInferior</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>valor;<sp/>i<sp/>&gt;<sp/>0;<sp/>i--)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux<sp/>=<sp/>malloc(<ref refid="array_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(aux,<sp/>dados[pos<sp/>-<sp/>x<sp/>+<sp/>(valor<sp/>-<sp/>i)].caracter);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a03437c92ee40f569345183c4fba10fcd" kindref="member">createIndex</ref>(dados,<sp/>pos<sp/>-<sp/>2<sp/>+<sp/>counter);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dados[pos<sp/>-<sp/>2<sp/>+<sp/>counter].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>aux;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>counter++;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="array_8c_1afa70604c067477d7c85a2799dacf9014" kindref="member">POP_ARRAY</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="array_8c_1a4f2e7e7705bda16afdcdea5750b4929a" kindref="member">ultimoElemento</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="324"><highlight class="normal">{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref>)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a8614fd455aff434b3c69b38e7378855a" kindref="member">swap</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="array_8c_1a45bf14a7cad7a18bccbeb8b2807a73f4" kindref="member">primeiroElemento</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref>)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/><ref refid="array_8c_1a599e932c3c42141d379425c37436485d" kindref="member">encontrarLimiteInferior</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux<sp/>=<sp/>malloc(<ref refid="array_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>dados[pos<sp/>-<sp/>x].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>dados[pos].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>aux;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>x);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="array_8c_1a7ed4a6b5abf99c5d2113883b704b9e77" kindref="member">duplicarArray</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="364"><highlight class="normal">{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a03437c92ee40f569345183c4fba10fcd" kindref="member">createIndex</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><ref refid="array_8c_1a5ea06a9fb406848573112d4524517c48" kindref="member">multArray</ref>(dados,<sp/>pos<sp/>+<sp/>1,<sp/>2);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a8614fd455aff434b3c69b38e7378855a" kindref="member">swap</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a03437c92ee40f569345183c4fba10fcd" kindref="member">createIndex</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a5bd721ef49e0397534dd2d6e76b20393" kindref="member">substituirStack</ref>(dados,<sp/>pos<sp/>-<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a5bd721ef49e0397534dd2d6e76b20393" kindref="member">substituirStack</ref>(dados,<sp/>pos<sp/>+<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="array_8c_1a663e2dc1b4b383e31405c335facd3be6" kindref="member">trocaArray_Atomo</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="385"><highlight class="normal">{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/><ref refid="array_8c_1a599e932c3c42141d379425c37436485d" kindref="member">encontrarLimiteInferior</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref><sp/>&amp;&amp;<sp/>dados[pos<sp/>-<sp/>x<sp/>-<sp/>2].tag<sp/>!=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref>)</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a5bd721ef49e0397534dd2d6e76b20393" kindref="member">substituirStack</ref>(dados,<sp/>pos,<sp/></highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a03437c92ee40f569345183c4fba10fcd" kindref="member">createIndex</ref>(dados,<sp/>pos<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a5bd721ef49e0397534dd2d6e76b20393" kindref="member">substituirStack</ref>(dados,<sp/>pos<sp/>+<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1].tag<sp/>!=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref><sp/>&amp;&amp;<sp/>dados[pos<sp/>-<sp/>2].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref>)</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux<sp/>=<sp/>malloc(<ref refid="array_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/><ref refid="array_8c_1a599e932c3c42141d379425c37436485d" kindref="member">encontrarLimiteInferior</ref>(dados,<sp/>pos<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>dados[pos<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a03437c92ee40f569345183c4fba10fcd" kindref="member">createIndex</ref>(dados,<sp/>pos<sp/>-<sp/>y<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a5bd721ef49e0397534dd2d6e76b20393" kindref="member">substituirStack</ref>(dados,<sp/>pos<sp/>-<sp/>y<sp/>-<sp/>1,<sp/>aux);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a8614fd455aff434b3c69b38e7378855a" kindref="member">swap</ref>(dados,<sp/>pos<sp/>-<sp/>y<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="array_8c_1ace222e6b2ab7db418c84ac70cc9e4d25" kindref="member">rodarStackArray</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="416"><highlight class="normal">{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/><ref refid="array_8c_1a599e932c3c42141d379425c37436485d" kindref="member">encontrarLimiteInferior</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux<sp/>=<sp/>malloc(<ref refid="array_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>aux[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>aux[1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1].tag<sp/>!=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a2085656f32afbd50512cd8364689405f" kindref="member">limite</ref>)</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a03437c92ee40f569345183c4fba10fcd" kindref="member">createIndex</ref>(dados,<sp/>pos<sp/>-<sp/>x);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a5bd721ef49e0397534dd2d6e76b20393" kindref="member">substituirStack</ref>(dados,<sp/>pos<sp/>-<sp/>x,<sp/>aux);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a5bd721ef49e0397534dd2d6e76b20393" kindref="member">substituirStack</ref>(dados,<sp/>pos<sp/>+<sp/>1,<sp/>aux);</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="array_8c_1a59bde5e176b93ebb9343dad95013876a" kindref="member">preencherVariavelArray</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="441"><highlight class="normal">{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/><ref refid="array_8c_1a599e932c3c42141d379425c37436485d" kindref="member">encontrarLimiteInferior</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux<sp/>=<sp/>malloc(<ref refid="array_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c1<sp/>=<sp/>malloc(<ref refid="array_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>strcpy(aux,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1].caracter[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>dados[pos<sp/>-<sp/>2].caracter[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="array_8c_1ae284c646d45c54e7348eecec1b18bcc4" kindref="member">preencherVariavelArrayArray</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>pos<sp/>-<sp/>x<sp/>-<sp/>1;<sp/>i<sp/>&lt;<sp/>pos;<sp/>i++)</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>strcat(aux,<sp/>dados[pos<sp/>-<sp/>x<sp/>-<sp/>1].caracter);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>strcat(aux,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>x<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>x<sp/>-<sp/>1].<ref refid="structStack_1a88a7aff3a52bd5cf0354601eaa55a310" kindref="member">variavel</ref><sp/>=<sp/>aux;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>c1[0]<sp/>=<sp/>dados[pos<sp/>-<sp/>x<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref>[1];</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>dados[pos<sp/>-<sp/>x<sp/>-<sp/>1].<ref refid="structStack_1acaab69ead915760ece7552b0b0bf5ba5" kindref="member">caracter</ref><sp/>=<sp/>c1;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="array_8c_1ae284c646d45c54e7348eecec1b18bcc4" kindref="member">preencherVariavelArrayArray</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="476"><highlight class="normal">{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="array_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>*c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;J&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(dados[pos<sp/>-<sp/>1<sp/>-<sp/>i].caracter[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal"><sp/>||<sp/>dados[pos<sp/>-<sp/>i].caracter[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux<sp/>=<sp/>malloc(<ref refid="array_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((dados[pos<sp/>-<sp/>1<sp/>-<sp/>i].caracter[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>dados[pos<sp/>-<sp/>i].caracter[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(dados[pos<sp/>-<sp/>1<sp/>-<sp/>i].caracter[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>dados[pos<sp/>-<sp/>i].caracter[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(aux,<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strcat(aux,<sp/>c);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a03437c92ee40f569345183c4fba10fcd" kindref="member">createIndex</ref>(dados,<sp/>pos<sp/>-<sp/>i);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a5bd721ef49e0397534dd2d6e76b20393" kindref="member">substituirStack</ref>(dados,<sp/>pos<sp/>-<sp/>i,<sp/>aux);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dados[pos<sp/>-<sp/>i].<ref refid="structStack_1a7192774d3ffefb08dce588451500a6bb" kindref="member">tag</ref><sp/>=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a93105b68e7bb763789c274fa898cabdc" kindref="member">variavel</ref>;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*c<sp/>=<sp/>*c<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal">}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="array_8c_1a0344eb1887db9a69fef65dd458d6667e" kindref="member">normalizarVariavelArray</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="506"><highlight class="normal">{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1a88a7aff3a52bd5cf0354601eaa55a310" kindref="member">variavel</ref>[i];<sp/>i++)</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="array_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>c[0]<sp/>=<sp/>dados[pos<sp/>-<sp/>2].<ref refid="structStack_1a88a7aff3a52bd5cf0354601eaa55a310" kindref="member">variavel</ref>[i];</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>c[1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a03437c92ee40f569345183c4fba10fcd" kindref="member">createIndex</ref>(dados,<sp/>pos<sp/>+<sp/>y);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a5bd721ef49e0397534dd2d6e76b20393" kindref="member">substituirStack</ref>(dados,<sp/>pos<sp/>+<sp/>y,<sp/>c);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y++;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="array_8c_1a4cdb77251d2d2d392217c44cac3d4b00" kindref="member">mostrarVariavelArray</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="533"><highlight class="normal">{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>malloc(<ref refid="array_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux<sp/>=<sp/>malloc(<ref refid="array_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>100;<sp/>i++)</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>aux[i]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>c[i]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>dados[pos].<ref refid="structStack_1a88a7aff3a52bd5cf0354601eaa55a310" kindref="member">variavel</ref>[i];<sp/>i++)</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos].<ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a93105b68e7bb763789c274fa898cabdc" kindref="member">variavel</ref>[i]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>dados[pos].<ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a93105b68e7bb763789c274fa898cabdc" kindref="member">variavel</ref>[i]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>dados[pos].<ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a93105b68e7bb763789c274fa898cabdc" kindref="member">variavel</ref>[i])</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c[y]<sp/>=<sp/>dados[pos].<ref refid="structStack_1a88a7aff3a52bd5cf0354601eaa55a310" kindref="member">variavel</ref>[i];</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c[y<sp/>+<sp/>1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y++;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>c[i];<sp/>i++)</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal"><sp/>||<sp/>c[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal"><sp/>||<sp/>c[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>aux[y]<sp/>=<sp/>c[i];</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y++;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dados[pos<sp/>+<sp/>1].tag<sp/>!=<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a93105b68e7bb763789c274fa898cabdc" kindref="member">variavel</ref><sp/>&amp;&amp;<sp/>(dados[pos<sp/>+<sp/>1].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4a96fa1904db1acb73a95355bf586370c2" kindref="member">numInteiro</ref><sp/>||<sp/>dados[pos<sp/>+<sp/>1].tag<sp/>==<sp/><ref refid="stack_8h_1a87da3d8264af1c9427605148f20dd9c4abd4cb7990b19a5770868ee8e1349eee1" kindref="member">numFloat</ref>))</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s<sp/>&quot;</highlight><highlight class="normal">,<sp/>aux);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>aux);</highlight></codeline>
<codeline lineno="571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="array_8c_1a62853e625c40339e28f52b22d25a3466" kindref="member">primeiroElementoVariavel</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="583"><highlight class="normal">{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a03437c92ee40f569345183c4fba10fcd" kindref="member">createIndex</ref>(dados,<sp/>pos<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a5bd721ef49e0397534dd2d6e76b20393" kindref="member">substituirStack</ref>(dados,<sp/>pos<sp/>+<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><ref refid="array_8c_1a0344eb1887db9a69fef65dd458d6667e" kindref="member">normalizarVariavelArray</ref>(dados,<sp/>pos<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="array_8c_1a0c39ae7d7c7b3bbe78bac55179074313" kindref="member">ultimoElementoVariavel</ref>(<ref refid="structStack" kindref="compound">stack</ref><sp/>*dados,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="601"><highlight class="normal">{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a03437c92ee40f569345183c4fba10fcd" kindref="member">createIndex</ref>(dados,<sp/>pos<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a5bd721ef49e0397534dd2d6e76b20393" kindref="member">substituirStack</ref>(dados,<sp/>pos<sp/>+<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><ref refid="array_8c_1a0344eb1887db9a69fef65dd458d6667e" kindref="member">normalizarVariavelArray</ref>(dados,<sp/>pos<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><ref refid="stack_8c_1a9708b50c12a13e5a033f83f7eda566bc" kindref="member">POP</ref>(dados,<sp/>pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="607"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="array.c"/>
  </compounddef>
</doxygen>
